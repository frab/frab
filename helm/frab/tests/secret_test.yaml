suite: test secret
templates:
  - secret.yaml
tests:
  - it: should render secret with required values
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-frab-secret
      - equal:
          path: type
          value: Opaque
      - exists:
          path: data.SECRET_KEY_BASE
      - matchRegex:
          path: data.SECRET_KEY_BASE
          pattern: ^[A-Za-z0-9+/]+=*$  # base64 pattern

  - it: should generate SECRET_KEY_BASE when not provided
    asserts:
      - exists:
          path: data.SECRET_KEY_BASE
      - isNotEmpty:
          path: data.SECRET_KEY_BASE

  - it: should use provided SECRET_KEY_BASE
    set:
      secretKeyBase: "my-custom-secret-key-base"
    asserts:
      - equal:
          path: data.SECRET_KEY_BASE
          value: bXktY3VzdG9tLXNlY3JldC1rZXktYmFzZQ==  # base64 encoded

  - it: should include RAILS_MASTER_KEY when provided
    set:
      rails.masterKey: "rails-master-key-123"
    asserts:
      - equal:
          path: data.RAILS_MASTER_KEY
          value: cmFpbHMtbWFzdGVyLWtleS0xMjM=  # base64 encoded

  - it: should include SMTP_PASSWORD when provided
    set:
      frab.smtp.password: "smtp-secret-password"
    asserts:
      - equal:
          path: data.SMTP_PASSWORD
          value: c210cC1zZWNyZXQtcGFzc3dvcmQ=  # base64 encoded

  - it: should include Google OAuth secret when enabled
    set:
      frab.google.enabled: true
      frab.google.clientSecret: "google-oauth-secret"
    asserts:
      - equal:
          path: data.GOOGLE_CLIENT_SECRET
          value: Z29vZ2xlLW9hdXRoLXNlY3JldA==  # base64 encoded

  - it: should include LDAP bind password when provided
    set:
      frab.ldap.enabled: true
      frab.ldap.bindPassword: "ldap-bind-secret"
    asserts:
      - equal:
          path: data.LDAP_BIND_PASSWORD
          value: bGRhcC1iaW5kLXNlY3JldA==  # base64 encoded

  - it: should include OIDC client secret when enabled
    set:
      frab.oidc.enabled: true
      frab.oidc.clientSecret: "oidc-client-secret"
    asserts:
      - equal:
          path: data.OPENID_CONNECT_CLIENT_SECRET
          value: b2lkYy1jbGllbnQtc2VjcmV0  # base64 encoded

  - it: should include PostgreSQL DATABASE_URL
    set:
      database.type: "postgresql"
      database.postgresql.host: "pg.example.com"
      database.postgresql.port: 5432
      database.postgresql.database: "frab_test"
      database.postgresql.username: "frab_user"
      database.postgresql.password: "postgres-password"
    asserts:
      - equal:
          path: data.DATABASE_URL
          value: cG9zdGdyZXNxbDovL2ZyYWJfdXNlcjpwb3N0Z3Jlcy1wYXNzd29yZEBwZy5leGFtcGxlLmNvbTo1NDMyL2ZyYWJfdGVzdA==  # base64 encoded

  - it: should include MySQL DATABASE_URL
    set:
      database.type: "mysql"
      database.mysql.host: "mysql.example.com"
      database.mysql.port: 3306
      database.mysql.database: "frab_test"
      database.mysql.username: "frab_user"
      database.mysql.password: "mysql-password"
    asserts:
      - equal:
          path: data.DATABASE_URL
          value: bXlzcWwyOi8vZnJhYl91c2VyOm15c3FsLXBhc3N3b3JkQG15c3FsLmV4YW1wbGUuY29tOjMzMDYvZnJhYl90ZXN0  # base64 encoded

  - it: should include SQLite DATABASE_URL
    set:
      database.type: "sqlite3"
      database.sqlite.path: "/rails/data/test.db"
    asserts:
      - equal:
          path: data.DATABASE_URL
          value: c3FsaXRlMzovLy9yYWlscy9kYXRhL3Rlc3QuZGI=  # base64 encoded

  - it: should include Redis cache password when enabled
    set:
      rails.cache.enabled: true
      rails.cache.type: "redis"
      rails.cache.redis.password: "redis-cache-pass"
    asserts:
      - equal:
          path: data.REDIS_CACHE_PASSWORD
          value: cmVkaXMtY2FjaGUtcGFzcw==  # base64 encoded

  - it: should include Redis session password when enabled
    set:
      rails.sessionStore.type: "redis"
      rails.sessionStore.redis.password: "redis-session-pass"
    asserts:
      - equal:
          path: data.REDIS_SESSION_PASSWORD
          value: cmVkaXMtc2Vzc2lvbi1wYXNz  # base64 encoded

  - it: should not include optional secrets when not provided
    asserts:
      - notExists:
          path: data.RAILS_MASTER_KEY
      - notExists:
          path: data.SMTP_PASSWORD
      - notExists:
          path: data.GOOGLE_CLIENT_SECRET
      - notExists:
          path: data.LDAP_BIND_PASSWORD
      - notExists:
          path: data.OPENID_CONNECT_CLIENT_SECRET
      - exists:
          path: data.DATABASE_URL
      - notExists:
          path: data.REDIS_CACHE_PASSWORD
      - notExists:
          path: data.REDIS_SESSION_PASSWORD

  - it: should handle multiple auth providers simultaneously
    set:
      frab.google.enabled: true
      frab.google.clientSecret: "google-secret"
      frab.ldap.enabled: true
      frab.ldap.bindPassword: "ldap-secret"
      frab.oidc.enabled: true
      frab.oidc.clientSecret: "oidc-secret"
    asserts:
      - equal:
          path: data.GOOGLE_CLIENT_SECRET
          value: Z29vZ2xlLXNlY3JldA==
      - equal:
          path: data.LDAP_BIND_PASSWORD
          value: bGRhcC1zZWNyZXQ=
      - equal:
          path: data.OPENID_CONNECT_CLIENT_SECRET
          value: b2lkYy1zZWNyZXQ=