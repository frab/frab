= simple_form_for(@conference, url: @conference.new_record? ? create_conference_path : conference_path) do |f|
  - if @conference.new_record? && @possible_parents.any?
    %fieldset.inputs
      %legend= t(:parent_conference)
      = f.input :parent_id, as: :select, collection: @possible_parents, hint: "Please select a parent for this new conference. A conferences nested under a parent will inherit the days and some settings (such as time slots and time zones etc.) from the parent, and the configuration of rooms and tracks may only be done with administation right for the parent conference. The parent's schedule export will also include events from the sub-conferences. If you don't know what this means, just leave this field blank, but note that this setting cannot be changed after the conference has been created."

  - elsif @conference.sub_conference?
    %fieldset.inputs
      %legend= t(:parent_conference)
      .input
        This conference is a sub-conference of
        ="'#{@conference.parent.title}'."

  %fieldset.inputs
    %legend= t(:basic_information)
    = f.input :title, hint: t('conferences_module.inputs.hints.title')
    = f.input :acronym, hint: t('conferences_module.inputs.hints.acronym')
    = f.input :email, hint: t('conferences_module.inputs.hints.email')
    = f.input :bcc_address, hint: t('conferences_module.inputs.hints.bcc_address')
    = f.input :color, hint: t('conferences_module.inputs.hints.color'), input_html: { class: 'color' }
  -if @conference.main_conference?
    %fieldset.inputs
      %legend= t(:timeslot_configuration)
      = f.input :timezone, as: :time_zone, hint: t('conferences_module.inputs.hints.timezone')
      = f.input :timeslot_duration, as: :select, collection: timeslot_durations(@conference), hint: t('conferences_module.inputs.hints.timeslot_duration')
      = f.input :default_timeslots, as: :select, collection: 1..20, hint: t('conferences_module.inputs.hints.default_timeslots')
      = f.input :max_timeslots, as: :select, collection: 1..100, hint: t('conferences_module.inputs.hints.')
      = f.input :allowed_durations_minutes_csv, as: :hidden
      = f.label t('accepted_event_durations')
      %div.conf-accepted-durations.span6.offset4#allowed_durations
        %ul
          = "..."
      %div.input.help-block= t('conferences_module.inputs.hints.accepted_event_durations')
  = dynamic_association :languages, t(:event_languages), f, hint: t('conferences_module.inputs.hints.event_languages')
  %fieldset.inputs
    %legend= t(:submission_configuration)
    = f.input :allowed_event_types_presets, as: :check_boxes, collection: translated_options(Event::TYPES), label: t('allowed_event_types'), hint: t('conferences_module.inputs.hints.allowed_event_types')
    = f.input :allowed_event_types_extras, as: :string, label: t('allowed_event_types_extras'), hint: t('conferences_module.inputs.hints.allowed_event_types_extras')
    = f.input :event_state_visible, as: :inline_boolean, hint: t('conferences_module.inputs.hints.event_state_visible')
    = f.input :attachment_title_is_freeform, as: :inline_boolean, hint: t('conferences_module.inputs.hints.attachment_title_is_freeform')
    = f.input :default_recording_license, hint: t('conferences_module.inputs.hints.default_recording_license')
  %fieldset.inputs
    %legend= t(:features)
    = f.input :feedback_enabled, as: :inline_boolean, hint: t('conferences_module.inputs.hints.feedback_enabled')
    = f.input :expenses_enabled, as: :inline_boolean, hint: t('conferences_module.inputs.hints.expenses_enabled')
    = f.input :transport_needs_enabled, as: :inline_boolean, hint: t('conferences_module.inputs.hints.transport_needs_enabled')
    = f.input :bulk_notification_enabled, as: :inline_boolean, hint: t('conferences_module.inputs.hints.bulk_notification_enabled')
  %fieldset.inputs
    %legend= t(:ticket_server)
    = f.input :ticket_type, as: :radio_buttons, collection: translated_options(Conference::TICKET_TYPES)
  .actions
    = f.button :submit, class: 'primary'

:coffeescript
  duration_to_time = (minutes) ->
    two_digits = (n) ->
      if n < 10
        return "0" + n
      else
        return "" + n

    two_digits(minutes // 60) + ':' + two_digits(minutes % 60)
    
  render_duration_checkboxes = () ->
    minutes_per_slot = $("select#conference_timeslot_duration").children("option:selected").val()
    default_submission_in_minutes = $("select#conference_default_timeslots").children("option:selected").val() * minutes_per_slot
    max_timeslots = $("select#conference_max_timeslots").children("option:selected").val()
    checked_items = $("#conference_allowed_durations_minutes_csv").val().split(',')
    ul = $(".conf-accepted-durations ul")
    ul.empty()
    for slots in [1..max_timeslots]
      minutes = slots * minutes_per_slot
      is_checked = minutes.toString() in checked_items || minutes == default_submission_in_minutes
      is_disabled = minutes==default_submission_in_minutes
      item = $('<input />', { class: 'accepted-duration-checkbox', type: 'checkbox', value: minutes, checked: is_checked, disabled: is_disabled})
      ul.append(item).append(duration_to_time(minutes)).append('<br/>')
      
    $("input.accepted-duration-checkbox").change ->
      checked_boxes = $("input.accepted-duration-checkbox").filter(':checked')
      csv = (b.value for b in checked_boxes).join(',')
      $("#conference_allowed_durations_minutes_csv").val(csv)

  $ ->
    $("#conference_max_timeslots,#conference_default_timeslots,#conference_timeslot_duration").change ->
      render_duration_checkboxes()
      true
      
    render_duration_checkboxes()
