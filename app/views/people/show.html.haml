%section
  .page-header
    .pull-right
      - if can? :crud, @person
        = action_button "primary", "Edit person", edit_person_path(@person), title: "Edit this person's data."
      - if can? :administrate, Person
        = action_button "add", "Add person", new_person_path, title: "Add a new person."
      - if @person.public_and_accepted_events_as_speaker_in(@conference).present?
        = action_button "attend", "Attending", attend_person_path, title: "Mark person as present.", method: 'PUT'
      - if @conference.try :ticket_server_enabled?
        - unless @person.remote_ticket?
          = action_button "primary", "Add Ticket", tickets_path(person_id: @person), method: :post, title: "Create a ticket for this person."
    %h1 Person: #{@person.full_name}
  = render 'shared/people_tabs'
  - if can? :manage, Person and @person.user.nil?
    .row
      .span16
        %p.message
          Person has no user account yet and cannot login. Click on the user tab to create an account.
  .row
    .span6
      %h2 Basic information
      %p
        %b First name:
        = @person.first_name
      %p
        %b Last name:
        = @person.last_name
      %p
        %b Public name:
        = @person.public_name
      %p
        %b Gender:
        = @person.gender

      %p
        %b Event State:
        - if @person.public_and_accepted_events_as_speaker_in(@conference).present?
          = @person.role_state @conference
        - else
          not speaking

      - unless @availabilities.nil?
        %p.availability
          %b Availability:
          - @availabilities.each do |availability|
            %span= "#{availability.start_date.strftime("%d.%m. %H:%M")} - #{availability.end_date.strftime("%H:%M")}"

      - unless @person.ticket.nil? or @person.ticket.remote_ticket_id.nil?
        %p
          %b Ticket:
          -if @conference.ticket_server.nil?
            = @person.ticket.remote_ticket_id
          -else
            = link_to @person.ticket.remote_ticket_id, get_ticket_view_url(@person.ticket.remote_ticket_id), target: "_blank"

    - if can? :manage, Person
      .span6
        %h2 Contact information
        %p
          %b Email:
          = mail_to @person.email
          (#{@person.email_public? ? "public" : "non-public"})
        - @person.phone_numbers.each do |phone_number|
          %p
            %b
              Phone number (#{phone_number.phone_type}):
            = phone_number.phone_number
        - @person.im_accounts.each do |im_account|
          %p
            %b
              = im_account.im_type
              \:
            = im_account.im_address
    .span4
      = image_box @person.avatar, :large
%section
  .row
    .span16
      %h2 Bio
  .row
    .span6
      %p
        %b Abstract:
        = simple_format @person.abstract
      %p
        %b Links:
        %br/
        - @person.links.each do |link|
          = link_to link.title, link.url
          %br/
    .span10
      %p
        %b Description:
        = simple_format @person.description
    .span10
      %p
        %b Notes(admin):
        = @person.note
%section
  .row
    .span16
      - unless @current_events.empty?
        %h2 Events in current conference
        = render "events/table", collection: @current_events
      - unless @other_events.empty?
        %h2 Events in other conferences
        = render "events_in_other_conferences_table", collection: @other_events

- if @conference.try :expenses_enabled? and @expenses.any?
  %section
    .row
      .span16
        %h2 Expenses
    .row
      .span6
        %p
          %b Reimbursed expenses:
      .span10
        %p
          = to_currency @expenses_sum_reimbursed
    .row
      .span6
        %p
          %b Non-reimbursed expenses:
      .span10
        %p
          = to_currency @expenses_sum_non_reimbursed

- if @conference.try :transport_needs_enabled? and @transport_needs.any?
  %section
    .row
      .span16
        %h2 Transport needs
        %table.zebra-striped
          %thead
            %tr
              %th When
              %th Type
              %th # of seats
              %th Booked?
              %th Note
              %th
          %tbody
            - @transport_needs.each do |tn|
              %tr
                %td= tn.at.to_formatted_s(:long)
                %td= tn.transport_type
                %td= tn.seats
                %td= tn.booked
                %td= tn.note
